У вас есть онлайн-магазин, который продает электронику. Компания имеет следующие сущности:

Пользователи (Users):

user_id (уникальный идентификатор пользователя)
имя (first_name)
фамилия (last_name)
электронная почта (email)
адрес доставки (shipping_address)


Продукты (Products):

product_id (уникальный идентификатор продукта)
название (name)
категория (category)
бренд (brand)
цена (price)
количество на складе (quantity)
  

Заказы (Orders):

order_id (уникальный идентификатор заказа)
user_id (идентификатор пользователя, связь с таблицей Users)
дата (date)
статус (status)
  

Позиции заказов (OrderItems):

order_items_id (уникальный идентификатор позиции заказа)
order_id (идентификатор заказа, связь с таблицей Orders)
product_id (идентификатор продукта, связь с таблицей Products)
количество (quantity)
стоимость (price)

В каждую таблицу добавьте по 10 записей и решите следующие задачи:

1. Найти все заказы, сделанные определённым пользователем (по его электронной почте).
2. Подсчитать общее количество продуктов в определённой категории.
3. Найти все заказы, сделанные в определённый период времени.
4. Подсчитать сумму всех заказов для каждого пользователя.
5. Найти все продукты, у которых остаток на складе меньше определённого значения.
6. Найти все заказы, стоимость которых превышает определённую сумму.
7. Найти все заказы, которые находятся в определённом статусе.
8. Подсчитать среднюю стоимость продуктов в каждой категории.
9. Найти все заказы, которые содержат определённый продукт.
10. Подсчитать общую стоимость всех заказов, сделанных в определённом году.


          -----------Решение проводилось в PostgreSQL (12.16)-----------


# Создать базы данных:

CREATE DATABASE online_store;


# Переход в созданную базу данных:

\c online_store


# Создать таблицу Users:

CREATE TABLE Users (user_id SERIAL PRIMARY KEY,
first_name VARCHAR,
last_name VARCHAR,
email VARCHAR,
shipping_address VARCHAR);


# Создать таблицу Products:

CREATE TABLE Products (product_id SERIAL PRIMARY KEY,
name VARCHAR,
category VARCHAR,
brand VARCHAR,
price NUMERIC,
quantity INTEGER);


# Создать таблицу Orders:

CREATE TABLE Orders (order_id SERIAL PRIMARY KEY,
user_id INTEGER REFERENCES Users(user_id),
date DATE,
status VARCHAR);


# Создать таблицу OrderItems:

CREATE TABLE OrderItems (order_items_id SERIAL PRIMARY KEY,
order_id INTEGER REFERENCES Orders(order_id),
product_id INTEGER REFERENCES Products(product_id),
quantity INTEGER,
price NUMERIC);


# Просмотреть список всех созданных таблиц в базе данных online_store:

\dt


             Список отношений
 Схема  |    Имя     |   Тип   | Владелец
--------+------------+---------+----------
 public | orderitems | таблица | admin
 public | orders     | таблица | admin
 public | products   | таблица | admin
 public | users      | таблица | admin
(4 строки)


# Заполнить таблицу Users данными:

INSERT INTO Users(user_id, first_name, last_name, email, shipping_address) 
VALUES (1,'Игорь', 'Петров', 'qaz@mail.qa', 'Минск'), 
(2,'Вася', 'Иванов', 'qwe@mail.wq', 'Брест'), 
(3,'Ваня', 'Сахар', 'zxc@maill.xz', 'Гродно'), 
(4,'Виктор', 'Викторов', 'rty@maill.re', 'Витебск'), 
(5,'Алик', 'Ахмедов', 'dfg@mail.fd', 'Могилёв'), 
(6,'Анна', 'Курнкова', 'uio@mail.oi', 'Гомель'), 
(7,'Марина', 'Цой', 'ghj@mail.hg', 'Мозырь'), 
(8,'Оля', 'Пушкина', 'vbn@mail.bv', 'Минск'), 
(9,'Коля', 'Королёв', 'mlk@mail.mk', 'Солигорск'), 
(10,'Дима', 'Толстой', 'tgn@mail.ij', 'Минск');


# Просмотреть таблицу Users:

SELECT * FROM Users;

 user_id | first_name | last_name |    email     | shipping_address
---------+------------+-----------+--------------+------------------
       1 | Игорь      | Петров    | qaz@mail.qa  | Минск
       2 | Вася       | Иванов    | qwe@mail.wq  | Брест
       3 | Ваня       | Сахар     | zxc@maill.xz | Гродно
       4 | Виктор     | Викторов  | rty@maill.re | Витебск
       5 | Алик       | Ахмедов   | dfg@mail.fd  | Могилёв
       6 | Анна       | Курнкова  | uio@mail.oi  | Гомель
       7 | Марина     | Цой       | ghj@mail.hg  | Мозырь
       8 | Оля        | Пушкина   | vbn@mail.bv  | Минск
       9 | Коля       | Королёв   | mlk@mail.mk  | Солигорск
      10 | Дима       | Толстой   | tgn@mail.ij  | Минск
(10 строк)

# Заполнить таблицу Products данными:

INSERT INTO Products (product_id, name, category, brand, price, quantity)
VALUES (1, 'Hyperset', 'обувь', 'NIKE',130.60 , 15),
(2, 'Arqué', 'сумка', 'PRADA', 300.00 , 10),
(3, 'SAUVAGE', 'туалетная вода', 'DIOR', 176.99 , 7),
(4, 'Re-Nylon', 'сумка', 'PRADA', 96.45 , 2),
(5, 'Baguette', 'сумка', 'FENDI', 679.00, 1),
(6, 'Trailgrip Lite', 'обувь', 'MONCLER',69.99 , 3),
(7, 'INFLICT', 'обувь', 'NIKE',210.75 , 13),
(8, 'Air Jordan', 'обувь', 'NIKE',369.00 , 2),
(9, 'HIGHER', 'туалетная вода', 'DIOR',210.05 , 5),
(10, 'GUCCI SAVOY', 'сумка', 'GICCI',248.70 ,10 );


# Просмотреть таблицу Products:

SELECT * FROM Products;

 product_id |      name      |    category    |  brand  | price  | quantity
------------+----------------+----------------+---------+--------+----------
          1 | Hyperset       | обувь          | NIKE    |  130.6 |       15
          2 | Arque          | сумка          | PRADA   |    300 |       10
          3 | SAUVAGE        | туалетная вода | DIOR    | 176.99 |        7
          4 | Re-Nylon       | сумка          | PRADA   |  96.45 |        2
          5 | Baguette       | сумка          | FENDI   |    679 |        1
          6 | Trailgrip Lite | обувь          | MONCLER |  69.99 |        3
          7 | INFLICT        | обувь          | NIKE    | 210.75 |       13
          8 | Air Jordan     | обувь          | NIKE    |    369 |        2
          9 | HIGHER         | туалетная вода | DIOR    | 210.05 |        5
         10 | GUCCI SAVOY    | сумка          | GICCI   |  248.7 |       10
(10 строк)

# Заполнить таблицу Orders данными:

INSERT INTO Orders (order_id, user_id, date, status)
VALUES (1, 1, '2022-08-15', 'есть'),
(2, 9, '2022-02-10', 'нет'),
(3, 8, '2022-10-20', 'есть'),
(4, 2, '2022-08-01', 'нет'),
(5, 4, '2022-01-29', 'нет'),
(6, 10, '2022-12-12', 'нет'),
(7, 3, '2023-01-01', 'нет'),
(8, 7, '2023-05-20', 'есть'),
(9, 6, '2022-11-20', 'есть'),
(10, 5, '2023-03-08', 'есть');


# Просмотреть таблицу Orders:

SELECT * FROM Orders;

 order_id | user_id |    date    | status
----------+---------+------------+--------
        1 |       1 | 2022-08-15 | есть
        2 |       9 | 2022-02-10 | нет
        3 |       8 | 2022-10-20 | есть
        4 |       2 | 2022-08-01 | нет
        5 |       4 | 2022-01-29 | нет
        6 |      10 | 2022-12-12 | нет
        7 |       3 | 2023-01-01 | нет
        8 |       7 | 2023-05-20 | есть
        9 |       6 | 2022-11-20 | есть
       10 |       5 | 2023-03-08 | есть
(10 строк)

# Заполнить таблицу OrderItems данными:

INSERT INTO OrderItems (order_items_id, order_id, product_id, quantity, price)
VALUES (1, 10, 9, 5, 23.50),
(2, 8, 7, 10, 20.00),
(3, 7, 1, 4, 15.00),
(4, 1, 8, 3, 40.00),
(5, 4, 3, 11, 34.60),
(6, 3, 5, 2, 39.60),
(7, 6, 4, 1, 20.90),
(8, 2, 10, 3, 21.00),
(9, 5, 6, 8, 40.90),
(10, 9, 2, 2, 17.30);


# Просмотреть таблицу OrderItems:

SELECT * FROM OrderItems;

 order_items_id | order_id | product_id | quantity | price
----------------+----------+------------+----------+-------
              1 |       10 |          9 |        5 |  23.5
              2 |        8 |          7 |       10 |    20
              3 |        7 |          1 |        4 |    15
              4 |        1 |          8 |        3 |    40
              5 |        4 |          3 |       11 |  34.6
              6 |        3 |          5 |        2 |  39.6
              7 |        6 |          4 |        1 |  20.9
              8 |        2 |         10 |        3 |    21
              9 |        5 |          6 |        8 |  40.9
             10 |        9 |          2 |        2 |  17.3
(10 строк)


# 1. Найти все заказы, сделанные определённым пользователем (по его электронной почте).

SELECT * FROM Orders WHERE user_id = (SELECT user_id FROM Users WHERE email = 'ghj@mail.hg');

 order_id | user_id |    date    | status
----------+---------+------------+--------
        8 |       7 | 2023-05-20 | есть
(1 строка)


# 2. Подсчитать общее количество продуктов в определённой категории.

SELECT SUM(quantity) AS total_quantity FROM Products WHERE category = 'туалетная вода';

 total_quantity
----------------
             12
(1 строка)


# 3. Найти все заказы, сделанные в определённый период времени.

SELECT * FROM Orders WHERE date >= '2022-01-01' AND date <= '2022-12-31';

 order_id | user_id |    date    | status
----------+---------+------------+--------
        1 |       1 | 2022-08-15 | есть
        2 |       9 | 2022-02-10 | нет
        3 |       8 | 2022-10-20 | есть
        4 |       2 | 2022-08-01 | нет
        5 |       4 | 2022-01-29 | нет
        6 |      10 | 2022-12-12 | нет
        9 |       6 | 2022-11-20 | есть
(7 строк)


# 4. Подсчитать сумму всех заказов для каждого пользователя.

SELECT user_id, SUM(price) AS total_price FROM Orders JOIN OrderItems ON Orders.order_id = OrderItems.order_id GROUP BY user_id;

 user_id | total_price
---------+-------------
       9 |       21.00
       3 |       15.00
       5 |       23.50
       4 |       40.90
      10 |       20.90
       6 |       17.30
       2 |       34.60
       7 |       20.00
       1 |       40.00
       8 |       39.60
(10 строк)


# 5. Найти все продукты, у которых остаток на складе меньше определённого значения.

SELECT * FROM Products WHERE quantity < 10;

 product_id |      name      |    category    |  brand  | price  | quantity
------------+----------------+----------------+---------+--------+----------
          3 | SAUVAGE        | туалетная вода | DIOR    | 176.99 |        7
          4 | Re-Nylon       | сумка          | PRADA   |  96.45 |        2
          5 | Baguette       | сумка          | FENDI   | 679.00 |        1
          6 | Trailgrip Lite | обувь          | MONCLER |  69.99 |        3
          8 | Air Jordan     | обувь          | NIKE    | 369.00 |        2
          9 | HIGHER         | туалетная вода | DIOR    | 210.05 |        5
(6 строк)


# 6. Найти все заказы, стоимость которых превышает определённую сумму.

SELECT * FROM Orders WHERE order_id IN (SELECT order_id FROM OrderItems GROUP BY order_id HAVING SUM(price) > 22.00);

 order_id | user_id |    date    | status
----------+---------+------------+--------
        1 |       1 | 2022-08-15 | есть
        3 |       8 | 2022-10-20 | есть
        4 |       2 | 2022-08-01 | нет
        5 |       4 | 2022-01-29 | нет
       10 |       5 | 2023-03-08 | есть
(5 строк)


# 7. Найти все заказы, которые находятся в определённом статусе.

SELECT * FROM Orders WHERE status = 'нет';

online_store=# SELECT * FROM Orders WHERE status = 'нет';
 order_id | user_id |    date    | status
----------+---------+------------+--------
        2 |       9 | 2022-02-10 | нет
        4 |       2 | 2022-08-01 | нет
        5 |       4 | 2022-01-29 | нет
        6 |      10 | 2022-12-12 | нет
        7 |       3 | 2023-01-01 | нет
(5 строк)


# 8. Подсчитать среднюю стоимость продуктов в каждой категории.

SELECT category, AVG(price) AS average_price FROM Products GROUP BY category;

    category    |    average_price
----------------+----------------------
 туалетная вода | 193.5200000000000000
 обувь          | 195.0850000000000000
 сумка          | 331.0375000000000000
(3 строки)


# 9. Найти все заказы, которые содержат определённый продукт.

SELECT * FROM Orders WHERE order_id IN (SELECT order_id FROM OrderItems WHERE product_id = 1);

 order_id | user_id |    date    | status
----------+---------+------------+--------
        7 |       3 | 2023-01-01 | нет
(1 строка)


# 10. Подсчитать общую стоимость всех заказов, сделанных в определённом году.

SELECT SUM(price) AS total_price FROM Orders JOIN OrderItems ON Orders.order_id = OrderItems.order_id WHERE EXTRACT(YEAR FROM date) = 2022;

 total_price
-------------
      214.30
(1 строка)